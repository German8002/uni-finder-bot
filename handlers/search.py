from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import Message

from utils.parsers import parse_user_query, format_filters_human
from services.search import find_programs

router = Router()

@router.message(CommandStart())
async def start(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤—É–∑—ã üéì\n"
        "–ù–∞–ø–∏—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<b>–ì–æ—Ä–æ–¥ –ö–∞–∑–∞–Ω—å; –ë–∞–ª–ª—ã 240; –û–±—â–µ–∂–∏—Ç–∏–µ –µ—Å—Ç—å; –£—Ä–æ–≤–µ–Ω—å –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç; –≠–∫–∑–∞–º–µ–Ω—ã –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—å, —Ñ–∏–∑–∏–∫–∞, —Ä—É—Å—Å–∫–∏–π</b>\n"
        "–ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤. –°–ª–æ–≤–∞-—Å–∏–Ω–æ–Ω–∏–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è.\n\n"
        "–ö–æ–º–∞–Ω–¥–∞: /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã."
    )

@router.message(F.text.regexp(r"(?i)^/help"))
async def help_cmd(m: Message):
    await m.answer(
        "–§–∏–ª—å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–Ω–∏–º–∞—é:\n"
        "‚Ä¢ –≥–æ—Ä–æ–¥ <–Ω–∞–∑–≤–∞–Ω–∏–µ> | –Ω–µ –≤–∞–∂–Ω–æ\n"
        "‚Ä¢ –±–∞–ª–ª—ã <—á–∏—Å–ª–æ> (–ï–ì–≠ —Å—É–º–º–∞—Ä–Ω–æ) | –Ω–µ –≤–∞–∂–Ω–æ\n"
        "‚Ä¢ –æ–±—â–µ–∂–∏—Ç–∏–µ (–µ—Å—Ç—å/–Ω–µ—Ç) | –Ω–µ –≤–∞–∂–Ω–æ\n"
        "‚Ä¢ —É—Ä–æ–≤–µ–Ω—å: –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç/–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞/—Å–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç/—Å–ø–æ/–∞—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞ | –Ω–µ –≤–∞–∂–Ω–æ\n"
        "‚Ä¢ —ç–∫–∑–∞–º–µ–Ω—ã: –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä. –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—å, —Ñ–∏–∑–∏–∫–∞, —Ä—É—Å—Å–∫–∏–π)\n"
        "‚Ä¢ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–≥–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞; –±–∞–ª–ª—ã 250; –æ–±—â–µ–∂–∏—Ç–∏–µ –µ—Å—Ç—å; —É—Ä–æ–≤–µ–Ω—å –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç; —ç–∫–∑–∞–º–µ–Ω—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—å, —Ä—É—Å—Å–∫–∏–π; –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"
    )

@router.message(F.text.len() > 0)
async def handle_query(m: Message):
    q = m.text.strip()
    filters = parse_user_query(q)
    await m.answer(
        f"–ò—â—É: <b>{q}</b>\n"
        f"–§–∏–ª—å—Ç—Ä—ã: {format_filters_human(filters)}"
    )
    items = await find_programs(filters)
    if not items:
        await m.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Å–ª–∞–±–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
        return

    chunk = items[:6]
    text_lines = []
    for i, it in enumerate(chunk, 1):
        line = (
            f"<b>{i}. {it.get('program') or it.get('title','–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
            f"–í–£–ó: {it.get('university','‚Äî')}\n"
            f"–ì–æ—Ä–æ–¥: {it.get('city','‚Äî')} | –£—Ä–æ–≤–µ–Ω—å: {it.get('level','‚Äî')}\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã: {it.get('min_score','‚Äî')} | –û–±—â–µ–∂–∏—Ç–∏–µ: {it.get('dorm','‚Äî')}\n"
            f"–≠–∫–∑–∞–º–µ–Ω—ã: {', '.join(it.get('exams', [])) if it.get('exams') else '‚Äî'}\n"
            f"–°—Å—ã–ª–∫–∞: {it.get('url','‚Äî')}"
        )
        text_lines.append(line)

    await m.answer("\n\n".join(text_lines))
