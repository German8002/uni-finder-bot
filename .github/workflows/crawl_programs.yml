name: crawl-programs

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Run mode"
        type: choice
        options: [quick, full]
        default: quick
      quick_minutes:
        description: "Quick mode time limit (minutes)"
        type: number
        default: 20
  schedule:
    # Weekly FULL run (Saturday 04:00 UTC)
    - cron: '0 4 * * 6'

permissions:
  contents: write

concurrency:
  group: crawl-programs
  cancel-in-progress: false

jobs:
  build_programs:
    name: Build programs (Wikipedia) — quick/full
    runs-on: ubuntu-latest
    timeout-minutes: 510   # >7h hard cap
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Build programs with heartbeat (quick/full)
        env:
          GH_EVENT: ${{ github.event_name }}
          IN_MODE: ${{ inputs.mode }}
          QUICK_MIN: ${{ inputs.quick_minutes }}
          PYTHONUNBUFFERED: "1"
        run: |
          set -e

          # Select mode: for schedule force full
          MODE="$IN_MODE"
          if [ "$GH_EVENT" = "schedule" ] || [ -z "$MODE" ]; then
            MODE="full"
          fi
          echo "MODE=$MODE"

          mkdir -p scraper_max/out

          if [ "$MODE" = "quick" ]; then
            MINS="${QUICK_MIN:-20}"
            echo "Running QUICK for ${MINS} minutes (timeout)…"
            timeout "${MINS}m" python -u scraper_max/scripts/build_programs.py &
          else
            echo "Running FULL…"
            python -u scraper_max/scripts/build_programs.py &
          fi

          PID=$!
          # Heartbeat
          while kill -0 "$PID" 2>/dev/null; do
            echo "[heartbeat] build_programs.py still running $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            sleep 60
          done
          # Don't fail if timeout returned 124
          wait "$PID" || true

      - name: Upload programs.csv artifact (backup)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: programs_csv
          path: scraper_max/out/programs.csv
          if-no-files-found: warn

      - name: Inspect programs CSV head (debug)
        run: |
          echo "--- CSV head ---"
          head -n 20 scraper_max/out/programs.csv || true
          echo "----------------"

      - name: Convert programs CSV -> data/programs.json (+ index)
        run: |
          python - << 'PY'
import csv, json, os, collections, sys

src = 'scraper_max/out/programs.csv'
out_json = 'data/programs.json'
out_index = 'data/programs_by_university.json'

os.makedirs('data', exist_ok=True)

if not os.path.exists(src):
    print(f"No CSV at {src} — nothing to convert.")
    sys.exit(0)

rows = []
by_uni = collections.defaultdict(list)

def to_int(v):
    try:
        return int(v)
    except:
        return v

with open(src, newline='', encoding='utf-8-sig') as f:
    r = csv.DictReader(f)
    for row in r:
        row = {k: (v.strip() if isinstance(v, str) else v) for k, v in row.items()}
        if not row.get('university_pageid'):
            continue
        for k in ('pageid', 'university_pageid', 'duration_years'):
            if k in row and row[k] != '':
                row[k] = to_int(row[k])
        rows.append(row)
        by_uni[str(row['university_pageid'])].append({
            'title': row.get('title'),
            'pageid': row.get('pageid'),
            'level': row.get('level'),
            'form': row.get('form'),
        })

with open(out_json, 'w', encoding='utf-8') as f:
    json.dump(rows, f, ensure_ascii=False, indent=2)

with open(out_index, 'w', encoding='utf-8') as f:
    json.dump(by_uni, f, ensure_ascii=False, indent=2)

print(f"Wrote {len(rows)} items -> {out_json}")
print(f"Wrote index keys: {len(by_uni)} -> {out_index}")
PY

      - name: Commit updated JSON
        run: |
          set -e
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add data/programs.json data/programs_by_university.json || true
          git diff --staged --quiet && echo "No changes to commit" || git commit -m "data: update programs.json [skip ci]"
          git pull --rebase --autostash
          git push
